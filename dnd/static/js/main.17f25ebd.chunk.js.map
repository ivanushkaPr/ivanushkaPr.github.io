{"version":3,"sources":["initial-data.js","Task.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragDisabled","isDragging","Task","this","task","draggableId","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","React","Component","Title","h3","TaskList","isDraggingOver","Column","column","droppableId","type","isDropDisabled","droppableProps","map","key","placeholder","App","state","onDragStart","start","homeIndex","indexOf","source","setState","onDragEnd","result","destination","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newState","starte","console","log","newTasksIds","newColumn","newColumnOrder","direction","shapshot","columnId","taskId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17f25ebd.chunk.js","sourcesContent":["const initialData = {\r\n  tasks: {\r\n    'task-1': { id: 'task-1', content: 'Take out the garbage'},\r\n    'task-2': { id: 'task-2', content: 'Watch my favorite show'},\r\n    'task-3': { id: 'task-3', content: 'Charge my phone'},\r\n    'task-4': { id: 'task-4', content: 'Cook dinner'},\r\n  },\r\n  columns: {\r\n    'column-1': {\r\n      id: 'column-1',\r\n      title: 'To do',\r\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\r\n    },\r\n    'column-2': {\r\n      id: 'column-2',\r\n      title: 'In progress',\r\n      taskIds: []\r\n    },\r\n    'column-3': {\r\n      id: 'column-3',\r\n      title: 'Done',\r\n      taskIds: []\r\n    },\r\n  },\r\n  columnOrder: ['column-1', 'column-2', 'column-3']\r\n}\r\n\r\n/*\r\nconst initialData = {\r\n  tasks: {\r\n    'task-1': { id: 'task-1', content: 'Take out the garbage'},\r\n    'task-2': { id: 'task-2', content: 'Watch my favorite show'},\r\n    'task-3': { id: 'task-3', content: 'Charge my phone'},\r\n    'task-4': { id: 'task-4', content: 'Cook dinner'},\r\n  },\r\n  columns: {\r\n    'column-1': {\r\n      id: 'column-1',\r\n      title: 'To do',\r\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\r\n    },\r\n    'column-2': {\r\n      id: 'column-2',\r\n      title: 'In progress',\r\n      taskIds: []\r\n    },\r\n    'column-3': {\r\n      id: 'column-3',\r\n      title: 'Done',\r\n      taskIds: []\r\n    },\r\n  },\r\n  columnOrder: ['column-1', 'column-2', 'column-3']\r\n}\r\n*/\r\n\r\nexport default initialData;","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nconst Container = styled.div`\r\nborder: 1px solid lightgrey;\r\nborder-radius: 2px;\r\npadding: 8px;\r\nmargin-bottom: 8px;\r\nbackground-color: ${(props) =>\r\n  props.isDragDisabled\r\n  ? 'lightgrey'\r\n: props.isDragging \r\n  ? 'lightgreen'\r\n  : 'white' \r\n};\r\n\r\n\r\n`;\r\n\r\n\r\nexport default class Task extends React.Component {\r\n\r\n  // Wrap item you want to be draggable into <Draggable>\r\n  // <Draggable> need have two mandatory props draggableId and index\r\n  // Children of it should be a function that returns JSX\r\n  // Draggable elements must have 3 props\r\n  // {...provided.draggableProps} - on outer draggable element\r\n  // {...providedHandleProps} - on element that will be triggering the drag\r\n  // ref={provided.innerRef}\r\n  render() {\r\n    const isDragDisabled = this.props.task.id === 'task-1';\r\n    return (\r\n      <Draggable\r\n      draggableId={this.props.task.id}\r\n      index={this.props.index}\r\n      isDragDisabled={isDragDisabled}\r\n      >\r\n        {(provided, snapshot) => (\r\n          <Container \r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n          isDragging={snapshot.isDragging}\r\n          isDragDisabled={isDragDisabled}\r\n          >\r\n            { this.props.task.content }\r\n          </Container>\r\n        )}\r\n      </Draggable>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Task from './Task.js';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n\r\nconst Container = styled.div`\r\nmargin: 8px;\r\nborder: 1px solid lightgrey;\r\nborder-radius: 2px;\r\nwidth: 250px;\r\n\r\ndisplay: flex;\r\nflex-direction: column\r\n\r\n`\r\n;\r\n\r\nconst Title = styled.h3`\r\npadding: 8px;`;\r\n\r\nconst TaskList = styled.div`\r\npadding: 8px;\r\ntransition: background-color 0.2s ease;\r\nbackground-color: ${(props) => props.isDraggingOver ? 'lightblue' : 'white'};\r\nflex-grow: 1;\r\nmin-height: 100px;\r\n\r\n`;\r\n\r\n\r\nexport default class Column extends React.Component {\r\n  // Wrap part of application you want drop in in Droppable\r\n  // Wrap childrend of Droppable in function, that return jsx\r\n  // add props {...provided.droppableProps}, ref={provided.innerRef}\r\n  // add {provided.placeholder} as last children of Droppable\r\n\r\n  render() {\r\n    return (\r\n      <Draggable draggableId={this.props.column.id} index={this.props.index}>\r\n        {(provided) => (\r\n          <Container {...provided.draggableProps}\r\n          ref={provided.innerRef}>\r\n          <Title\r\n          {...provided.dragHandleProps}\r\n          >{this.props.column.title}</Title>\r\n          <Droppable droppableId={this.props.column.id}\r\n          type=\"task\"\r\n          isDropDisabled={this.props.isDropDisabled}\r\n          //type={this.props.column.id === 'column-3' ? 'done' : 'active'}\r\n          >\r\n          {(provided, snapshot) => (\r\n            <TaskList {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              isDraggingOver={snapshot.isDraggingOver}\r\n            > \r\n              {this.props.tasks.map((task, index) => <Task key={task.id} task={task} index={index}/>)}\r\n              {provided.placeholder}\r\n            </TaskList>)\r\n          }\r\n          </Droppable>\r\n  \r\n        </Container>\r\n        )}\r\n      </Draggable>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport initialData from './initial-data.js';\nimport Column from './Column';\n\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\ndisplay: flex`\n\nclass App extends Component {\n  state = { ...initialData };\n\n  // Callbacks\n  onDragStart = (start) => {\n    const homeIndex = this.state.columnOrder.indexOf(start.source.droppableId)\n\n    this.setState({\n      homeIndex,\n    })\n  }\n\n\n  // The only one mandatory callback\n  onDragEnd = (result) => {\n    this.setState({\n      homeIndex: null,\n    })\n\n    const {destination, source, draggableId, type} = result;\n\n    if(!destination) {\n      return;\n    }\n\n    if(destination.droppableId === source.droppableId && destination.index === source.index) {\n      return\n    }\n\n    if(type === 'column') {\n      const newColumnOrder =  Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0 , draggableId);\n\n      const newState = {\n        ...this.state, \n        columnOrder: newColumnOrder,\n      }\n\n      this.setState(newState);\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if(start === finish) {\n      console.log('we are here');\n      const newTasksIds = Array.from(start.taskIds)\n\n      newTasksIds.splice(source.index, 1);\n      newTasksIds.splice(destination.index, 0, draggableId);\n\n\n      const newColumn = {\n        ...start,\n        taskIds: newTasksIds\n      }\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      this.setState(newState);\n      return;\n    }\n\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    }\n\n    const newState = {\n      ...this.starte,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      }\n    }\n\n\n    this.setState(newState);\n\n    \n\n  }\n\n  \n\n  render() {\n    return (\n\n      // You should wrap the entire application in drag and drop context\n      <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\n        <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n          {(provided, shapshot) => (\n            <Container {...provided.droppableProps}\n            ref={provided.innerRef}\n            >\n            {\n              this.state.columnOrder.map((columnId, index) => {\n              const column = this.state.columns[columnId];\n              console.log(column, 'gskjghs');\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              \n              const isDropDisabled = index < this.state.homeIndex;\n  \n              return <Column key={columnId} column={column} tasks={tasks}  isDropDisabled={ isDropDisabled} index={index}/>\n            })\n            }\n            {provided.placeholder}\n          </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n    )\n\n    \n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}